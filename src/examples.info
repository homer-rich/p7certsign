================================================================================================================
// Displays selected cert
UI::CryptUIDlgViewContext(
    CERT_STORE_CERTIFICATE_CONTEXT,
    fresh_cert as *mut c_void,
    None,
    w!("Selected Certificate"),
    0,
    ::core::mem::zeroed(),
);
================================================================================================================
// Open a memory store and able to read system stores if setting the READONLY flag
let memory_store = CertOpenStore(
    CERT_STORE_PROV_MEMORY,
    CERT_QUERY_ENCODING_TYPE::default(),
    HCRYPTPROV_LEGACY::default(),
    CERT_OPEN_STORE_FLAGS(0),
    ::core::mem::zeroed())?;
let read_only_local_machine_store = (CERT_SYSTEM_STORE_LOCAL_MACHINE_ID << CERT_SYSTEM_STORE_LOCATION_SHIFT).bitor(CERT_STORE_READONLY_FLAG.0);
let ls_root_store = CertOpenStore(
        CERT_STORE_PROV_SYSTEM_W,
        CERT_QUERY_ENCODING_TYPE::default(),
        HCRYPTPROV_LEGACY::default(),
        CERT_OPEN_STORE_FLAGS(read_only_local_machine_store),
        Some(w!("CA").as_ptr() as *const c_void))?;

================================================================================================================
// Save a memory store to file
let strang = w!("c:\\users\\hrich\\desktop\\memory_store.p7b").as_ptr() as *mut c_void;

let success = windows::Win32::Security::Cryptography::CertSaveStore(
    ls_root_store,
    PKCS_7_ASN_ENCODING | X509_ASN_ENCODING,
    windows::Win32::Security::Cryptography::CERT_STORE_SAVE_AS_PKCS7,
    windows::Win32::Security::Cryptography::CERT_STORE_SAVE_TO_FILENAME_W,
    strang,
    0);
println!("suuuuuuuucess: {:?}", success);

================================================================================================================
// Setup for calling exe signature UI
let mut extended_sign_info: UI::CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO = UI::CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO {
    dwSize: std::mem::size_of::<UI::CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO>() as u32,
    dwAttrFlags: UI::CRYPTUI_WIZ_DIGITAL_SIGN_INDIVIDUAL,
    pwszDescription: w!("My Cert"),
    pwszMoreInfoLocation: w!(""),
    pszHashAlg: s!(""),
    pwszSigningCertDisplayString: w!("Test"),
    hAdditionalCertStore: ::core::mem::zeroed(),
    psAuthenticated: ::core::mem::zeroed(),
    psUnauthenticated: ::core::mem::zeroed(),
};
let sign_info: UI::CRYPTUI_WIZ_DIGITAL_SIGN_INFO = UI::CRYPTUI_WIZ_DIGITAL_SIGN_INFO {
    dwSize: std::mem::size_of::<UI::CRYPTUI_WIZ_DIGITAL_SIGN_INFO>() as u32,
    dwSubjectChoice: windows::Win32::Security::Cryptography::UI::CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT(0),
    Anonymous1: UI::CRYPTUI_WIZ_DIGITAL_SIGN_INFO_0{ pwszFileName: w!("") },
    dwSigningCertChoice: UI::CRYPTUI_WIZ_DIGITAL_SIGN_CERT,
    Anonymous2: UI::CRYPTUI_WIZ_DIGITAL_SIGN_INFO_1 { pSigningCertContext: fresh_cert },
    pwszTimestampURL: w!(""),
    dwAdditionalCertChoice: UI::CRYPTUI_WIZ_DIGITAL_ADDITIONAL_CERT_CHOICE(0),
    pSignExtInfo: &mut extended_sign_info as *mut UI::CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO,
};
// Call exe siganture UI with cert selected above
let show_me_signature = UI::CryptUIWizDigitalSign(
    0,
    None,
    w!("Title"),
    &sign_info as *const UI::CRYPTUI_WIZ_DIGITAL_SIGN_INFO, 
    ::core::mem::zeroed(), 
);
if show_me_signature.as_bool() { println!("Sign Good") } else { println!("Sign Bad") }

================================================================================================================ 
// Find a certificate
let cert_subj = w!("DoD JITC Root CA 3").as_ptr() as *mut c_void;
let find_cert = CertFindCertificateInStore(
    personal_store,
    X509_ASN_ENCODING,
    0,
    CERT_FIND_SUBJECT_STR,
    Some(cert_subj),
    ::core::mem::zeroed()); 
    */

================================================================================================================
/*let file_interaction = CreateFileW(
    w!("c:\\users\\hrich\\desktop\\root_pkcs7_store.p7b"),
    FILE_GENERIC_WRITE,
    FILE_SHARE_WRITE,
    None,
    CREATE_ALWAYS,
    FILE_ATTRIBUTE_NORMAL,
    None)?;*/

================================================================================================================
println!("Certificate info: {:?}", cert_subby);
let success_select = CertSelectCertificateW(cert_select_struct);
let hinstance = winapi::um::libloaderapi::GetModuleHandleW(std::ptr::null_mut());
std::mem::size_of::<CERT_SELECT_STRUCT_W>() as u32

================================================================================================================
let strang = w!("Signer_Box").abi().as_ptr() as *mut c_void;
let digital_sign = CryptUIWizDigitalSign(
    0,
    event,
    strang,
);
let strang = w!("c:\\users\\hrich\\desktop\\memory_store.p7b").as_ptr() as *mut c_void;
let save_to_store = CertAddCertificateContextToStore(
    memory_store,
    fresh_cert,
    CERT_STORE_ADD_REPLACE_EXISTING,
    None);
let success = CertSaveStore(
    memory_store,
    PKCS_7_ASN_ENCODING | X509_ASN_ENCODING,
    CERT_STORE_SAVE_AS_PKCS7,
    CERT_STORE_SAVE_TO_FILENAME_W,
    strang,
    0);
================================================================================================================
//MessageBoxW(None, w!("Wide"), w!("Caption"), windows::Win32::UI::WindowsAndMessaging::MB_OK);
//println!("We happy?:  {:?}", success);
//println!("We saved to memory?:  {:?}", save_to_store);